#!/bin/bash
################################################################################
##
## Copyright (c) 2014 Illumina, Inc.
##
## This file is part of Illumina's Enhanced Artificial Genome Engine (EAGLE),
## covered by the "BSD 2-Clause License" (see accompanying LICENSE file)
##
## file configure
##
## Top level configuration file
##
## author Mauricio Varea
##
################################################################################

# Display EAGLE configure usage
eagle_usage()
{
    cat <<EOF
Usage: $0 [options]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
  --version               only print version information
  --verbose               display more information (enables CMAKE_VERBOSE_MAKEFILE)
  --parallel=n            build cmake and boost in parallel if needed, where n
                          is the number of nodes [1]
  --with-cmake=CMAKE      specify the cmake executable [cmake]
  --with-eclipse          create the eclipse project files
  --with-version-control  create the eclipse project in the source tree to
                          allow version control within eclipse
  --with-unit-tests       allow unit testing during the build
  --build-type            specify the build type for CMake (affects compiler
                          options). Allowed values are "", "Debug", "Release",
                          "RelWithDebInfo", and "MinSizeRel" [RelWithDebInfo]
  --static                forces library static linking
  --rpm                   enables Linux RPM generation target (make package)

Directory and file names:
  --prefix=PREFIX         install files in tree rooted at PREFIX
                          [${eagle_default_prefix}]
  --exec-prefix=EPREFIX   install binary files in tree rooted at EPREFIX
                          [PREFIX]
  --bindir=DIR            install executable in DIR [EPREFIX/bin]
  --libdir=DIR            install library files in DIR [EPREFIX/lib/EAGLE-${eagle_version_full}]
  --libexecdir=DIR        install library programs in DIR [EPREFIX/libexec/EAGLE-${eagle_version_full}]
  --includedir=DIR        install include files in DIR [PREFIX/include/EAGLE-${eagle_version_full}]
  --datadir=DATADIR       install data files in DIR [PREFIX/share/EAGLE-${eagle_version_full}]
  --docdir=DIR            install documentation in DIR [DATADIR/doc]
  --mandir=DIR            install man pages files in DIR/manN [PREFIX/man]
  --builddir=DIR          build EAGLE in DIR [./]

Some influential environment variables:
  BOOST_ROOT       location of the boost library
  BOOST_INCLUDEDIR location of the include directory of boost
  BOOST_LIBRARYDIR location of the lib directory of boost
  CC               C compiler command
  CFLAGS           C compiler flags
  LDFLAGS          linker flags, e.g. -L<lib dir> if you have libraries in a
                   nonstandard directory <lib dir>
  CPPFLAGS         C/C++ preprocessor flags, e.g. -I<include dir> if you have
                   headers in a nonstandard directory <include dir>
  CXX              C++ compiler command
  CXX_FLAGS        C++ compiler flags
  CMAKE_OPTIONS    CMake command line options, e.g. "-DCMAKE_BUILD_TYPE=Debug"

Use these variables to override the choices made by 'configure' or to help
it to find libraries and programs with nonstandard names/locations.

EOF
    exit 10
}

# Version number extraction function.
eagle_version_component()
{
    cat "${eagle_source_dir}/CMakeLists.txt" | sed -n "
/^set(EAGLE_VERSION_${1}/ {s/set(EAGLE_VERSION_${1} *\"\([0-9]*\)\")/\1/;p;}
"
}

# String extraction function.
eagle_string_component()
{
    cat "${eagle_source_dir}/CMakeLists.txt" | sed -n "
/^set(EAGLE_${1}/ {s/set(EAGLE_${1} *\"\([^\"]*\)\")/\1/;p;}
"
}

# Helper function to fix windows paths.
eagle_fix_slashes ()
{
    echo "$1" | sed 's/\\/\//g'
}

# Detect system and directory information.
eagle_system="`uname`"
eagle_processor="`uname -p`"
eagle_source_dir="`echo $0 | sed -n '/\//{s/\/[^\/]*$//;p;}'`"
eagle_source_dir="`(cd "${eagle_source_dir}";pwd)`"
eagle_redist_dir="${eagle_source_dir}/../redist"
eagle_bootstrap_dir="${eagle_source_dir}/cmake/bootstrap"
eagle_build_dir="`pwd`"
eagle_version_major="`eagle_version_component MAJOR`"
eagle_version_minor="`eagle_version_component MINOR`"
eagle_version_patch="`eagle_version_component PATCH`"
eagle_version="${eagle_version_major}.${eagle_version_minor}"
eagle_version_full="${eagle_version_major}.${eagle_version_minor}.${eagle_version_patch}"
eagle_string_full="`eagle_string_component NAME`"
eagle_copyright="`eagle_string_component COPYRIGHT`"

# Determine whether this is a MinGW environment.
if echo "${eagle_system}" | grep MINGW >/dev/null 2>&1; then
    eagle_system_mingw=true
else
    eagle_system_mingw=false
fi

# Determine whether this is OS X
if echo "${eagle_system}" | grep Darwin >/dev/null 2>&1; then
    eagle_system_darwin=true
else
    eagle_system_darwin=false
fi

# Choose the default install prefix.
if ${eagle_system_mingw}; then
    if [ "x${PROGRAMFILES}" != "x" ]; then
        eagle_default_prefix=`eagle_fix_slashes "${PROGRAMFILES}/CMake"`
    elif [ "x${ProgramFiles}" != "x" ]; then
        eagle_default_prefix=`eagle_fix_slashes "${ProgramFiles}/CMake"`
    elif [ "x${SYSTEMDRIVE}" != "x" ]; then
        eagle_default_prefix=`eagle_fix_slashes "${SYSTEMDRIVE}/Program Files/CMake"`
    elif [ "x${SystemDrive}" != "x" ]; then
        eagle_default_prefix=`eagle_fix_slashes "${SystemDrive}/Program Files/CMake"`
    else
        eagle_default_prefix="c:/Program Files/CMake"
    fi
else
    eagle_default_prefix="/usr/local"
fi

# Parse arguments
eagle_build_type=RelWithDebInfo
#eagle_build_type=Debug
eagle_cmake_generator="Unix Makefiles"
eagle_verbose=
eagle_parallel=1
for a in "$@"; do
    if echo $a | grep "^--prefix=" > /dev/null 2> /dev/null; then
        eagle_prefix_dir=`echo $a | sed "s/^--prefix=//"`
        eagle_prefix_dir=`eagle_fix_slashes "${eagle_prefix_dir}"`
    fi
    if echo $a | grep "^--exec-prefix=" > /dev/null 2> /dev/null; then
        eagle_exec_prefix_dir=`echo $a | sed "s/^--exec-prefix=//"`
        eagle_exec_prefix_dir=`eagle_fix_slashes "${eagle_exec_prefix_dir}"`
    fi
    if echo $a | grep "^--bindir=" > /dev/null 2> /dev/null; then
        eagle_bin_dir=`echo $a | sed "s/^--bindir=//"`
        eagle_bin_dir=`eagle_fix_slashes "${eagle_bin_dir}"`
    fi
    if echo $a | grep "^--libdir=" > /dev/null 2> /dev/null; then
        eagle_lib_dir=`echo $a | sed "s/^--libdir=//"`
        eagle_lib_dir=`eagle_fix_slashes "${eagle_lib_dir}"`
    fi
    if echo $a | grep "^--libexecdir=" > /dev/null 2> /dev/null; then
        eagle_libexec_dir=`echo $a | sed "s/^--libexecdir=//"`
        eagle_libexec_dir=`eagle_fix_slashes "${eagle_libexec_dir}"`
    fi
    if echo $a | grep "^--includedir=" > /dev/null 2> /dev/null; then
        eagle_include_dir=`echo $a | sed "s/^--includedir=//"`
        eagle_include_dir=`eagle_fix_slashes "${eagle_include_dir}"`
    fi
    if echo $a | grep "^--datadir=" > /dev/null 2> /dev/null; then
        eagle_data_dir=`echo $a | sed "s/^--datadir=//"`
        eagle_data_dir=`eagle_fix_slashes "${eagle_data_dir}"`
    fi
    if echo $a | grep "^--docdir=" > /dev/null 2> /dev/null; then
        eagle_doc_dir=`echo $a | sed "s/^--docdir=//"`
        eagle_doc_dir=`eagle_fix_slashes "${eagle_doc_dir}"`
    fi
    if echo $a | grep "^--mandir=" > /dev/null 2> /dev/null; then
        eagle_man_dir=`echo $a | sed "s/^--mandir=//"`
        eagle_man_dir=`eagle_fix_slashes "${eagle_man_dir}"`
    fi
    if echo $a | grep "^--builddir=" > /dev/null 2> /dev/null; then
        eagle_build_dir=`echo $a | sed "s/^--builddir=//"`
        eagle_build_dir=`eagle_fix_slashes "${eagle_build_dir}"`
    fi
    if echo $a | grep "^--help" > /dev/null 2> /dev/null; then
        eagle_usage
    fi
    if echo $a | grep "^--version" > /dev/null 2> /dev/null; then
        echo "${eagle_string_full} ${eagle_version_full}, ${eagle_copyright}"
        exit 2
    fi
    if echo $a | grep "^--with-cmake" > /dev/null 2> /dev/null; then
        eagle_cmake=`echo $a | sed "s/^--with-cmake=//"`
        eagle_cmake=`eagle_fix_slashes "${eagle_cmake}"`
    fi
    if echo $a | grep "^--build-type" > /dev/null 2> /dev/null; then
        eagle_build_type=`echo $a | sed "s/^--build-type=//"`
        eagle_build_type=`eagle_fix_slashes "${eagle_build_type}"`
    fi
    if echo $a | grep "^--parallel" > /dev/null 2> /dev/null; then
        eagle_parallel=`echo $a | sed "s/^--parallel=//"`
    fi
    if echo $a | grep "^--with-eclipse" > /dev/null 2> /dev/null; then
        eagle_cmake_generator="Eclipse CDT4 - Unix Makefiles"
    fi
    if echo $a | grep "^--with-version-control" > /dev/null 2> /dev/null; then
        CMAKE_OPTIONS="$CMAKE_OPTIONS -DECLIPSE_CDT4_GENERATE_SOURCE_PROJECT=TRUE"
    fi
    if echo $a | grep "^--with-unit-tests" > /dev/null 2> /dev/null; then
        CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_UNIT_TESTS=TRUE"
    fi
    if echo $a | grep "^--with-libzoo" > /dev/null 2> /dev/null; then
        libzoo=`echo $a | sed "s/^--with-libzoo=//"`
        CMAKE_OPTIONS="$CMAKE_OPTIONS -DLIBZOO_LIBRARY:PATH=${libzoo} -DLibzoo_FOUND:BOOL=ON"
    fi
    if echo $a | grep "^--with-libzoo-include-dir" > /dev/null 2> /dev/null; then
        libzoo_include_dir=`echo $a | sed "s/^--with-libzoo-include-dir=//"`
        CMAKE_OPTIONS="$CMAKE_OPTIONS -DLIBZOO_INCLUDE_DIR:PATH=${libzoo_include_dir} -DLibzoo_FOUND:BOOL=ON"
    fi
    if echo $a | grep "^--verbose" > /dev/null 2> /dev/null; then
        eagle_verbose=TRUE
    fi
    if echo $a | grep "^--static" > /dev/null 2> /dev/null; then
        eagle_static=TRUE
    fi
    if echo $a | grep "^--rpm" > /dev/null 2> /dev/null; then
        eagle_rpm=TRUE
    fi
    if echo $a | grep "^--debug-mode" > /dev/null 2> /dev/null; then
        eagle_debug=TRUE
    fi
    if echo $a | grep "^--silent" > /dev/null 2> /dev/null; then
        eagle_silent=TRUE
    fi
done

eagle_cmake_install_dir="${eagle_build_dir}/bootstrap"
if [ "x${eagle_cmake}"       == "x" ] ; then 
    "${eagle_bootstrap_dir}"/installCmake.sh "${eagle_redist_dir}" "${eagle_cmake_install_dir}" "${eagle_parallel}"
    cmake_install_exit_code="$?"
    if [ "$cmake_install_exit_code" == "1" ]; then
        eagle_cmake=cmake
        echo "Using existing `which cmake`"
    elif [ "$cmake_install_exit_code" == "0" ]; then
        eagle_cmake="${eagle_cmake_install_dir}/bin/cmake"
        echo "Using installed ${eagle_cmake}"
    else
        echo "Failed to verify or install cmake"
        exit 3
    fi
fi

# Set the build and install paths

#if [ "x${eagle_prefix_dir}"      == "x" ] ; then eagle_prefix_dir="${eagle_default_prefix}" ; fi
#if [ "x${eagle_exec_prefix_dir}" == "x" ] ; then eagle_exec_prefix_dir="." ; fi
#if [ "x${eagle_bin_dir}"         == "x" ] ; then eagle_bin_dir="${eagle_exec_prefix_dir}/bin" ; fi
#if [ "x${eagle_lib_dir}"         == "x" ] ; then eagle_lib_dir="${eagle_exec_prefix_dir}/lib/EAGLE-${eagle_version_full}" ; fi
#if [ "x${eagle_libexec_dir}"     == "x" ] ; then eagle_libexec_dir="${eagle_exec_prefix_dir}/libexec/EAGLE-${eagle_version_full}" ; fi
#if [ "x${eagle_include_dir}"     == "x" ] ; then eagle_include_dir="include/EAGLE-${eagle_version_full}" ; fi
#if [ "x${eagle_data_dir}"        == "x" ] ; then eagle_data_dir="share/EAGLE-${eagle_version_full}" ; fi
#if [ "x${eagle_doc_dir}"         == "x" ] ; then eagle_doc_dir="doc" ; fi
#if [ "x${eagle_man_dir}"         == "x" ] ; then eagle_man_dir="man" ; fi
#if [ "x${eagle_build_dir}"       == "x" ] ; then eagle_build_dir="`pwd`" ; fi

# display information if required
if [ -n "${eagle_verbose}" ]; then
    echo "Source  directory: ${eagle_source_dir}"
    echo "Prefix  directory: ${eagle_prefix_dir}"
    echo "Exec    directory: ${eagle_exec_prefix_dir}"
    echo "Binary  directory: ${eagle_bin_dir}"
    echo "Lib     directory: ${eagle_lib_dir}"
    echo "Libexec directory: ${eagle_libexec_dir}"
    echo "Include directory: ${eagle_include_dir}"
    echo "Data    directory: ${eagle_data_dir}"
    echo "Doc     directory: ${eagle_doc_dir}"
    echo "Man     directory: ${eagle_man_dir}"
    echo "Build   directory: ${eagle_build_dir}"
    echo "Cmake  executable: ${eagle_cmake}"
    echo ""
fi  

# create the build directory if necessary
if [[ ! -d "${eagle_build_dir}" ]]; then 
    mkdir "${eagle_build_dir}"
    if [ "$?" != 0 ]; then
        echo "Couldn't create the build directory: ${eagle_build_dir}"
        exit 4
    fi
fi

# invoke cmake

CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_PREFIX:PATH=${eagle_prefix_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_EXEC_PREFIX:PATH=${eagle_exec_prefix_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX:PATH=${eagle_prefix_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_BINDIR:PATH=${eagle_bin_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_LIBDIR:PATH=${eagle_lib_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_LIBEXECDIR:PATH=${eagle_libexec_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_INCLUDEDIR:PATH=${eagle_include_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_DATADIR:PATH=${eagle_data_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_DOCDIR:PATH=${eagle_doc_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_MANDIR:PATH=${eagle_man_dir}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DCMAKE_BUILD_TYPE:STRING=${eagle_build_type}"
CMAKE_OPTIONS="$CMAKE_OPTIONS -DCMAKE_PARALLEL:STRING=${eagle_parallel}"

if [ -n "${eagle_static}" ]; then
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_FORCE_STATIC_LINK:BOOL=ON"
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DLINK_SEARCH_END_STATIC:BOOL=ON"
fi

if [ -n "${eagle_verbose}" ]; then
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_DEBUG:BOOL=ON"
    echo "Running on: `uname -a`"
    echo "Configuring the build directory with:"
    echo "    "${eagle_cmake} -H\"${eagle_source_dir}\" -B\"${eagle_build_dir}\" -G\"${eagle_cmake_generator}\" ${CMAKE_OPTIONS}
    echo ""
fi

if [ -n "${eagle_debug}" ]; then
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_DEBUG_MODE:BOOL=ON"
fi

if [ -n "${eagle_silent}" ]; then
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DEAGLE_SILENT_MODE:BOOL=ON"
fi

if [ -n "${eagle_rpm}" ]; then
    CMAKE_OPTIONS="$CMAKE_OPTIONS -DCPACK_GENERATOR:STRING=RPM -DCPACK_SYSTEM_NAME:STRING=${eagle_system}-${eagle_processor}"
    echo "Running on: `uname -a`"
    echo "Configuring the build directory with:"
    echo "    "${eagle_cmake} -H\"${eagle_source_dir}\" -B\"${eagle_build_dir}\" -G\"${eagle_cmake_generator}\" ${CMAKE_OPTIONS}
    echo ""
fi

${eagle_cmake} -H"${eagle_source_dir}" -B"${eagle_build_dir}" -G"${eagle_cmake_generator}" ${CMAKE_OPTIONS}

if [ "$?" != 0 ]; then
    echo "Couldn't configure the project:"
    echo ""
    echo "${eagle_cmake} -H\"${eagle_source_dir}\" -B\"${eagle_build_dir}\" -G\"${eagle_cmake_generator}\" ${CMAKE_OPTIONS}"
    echo ""
    echo "Moving CMakeCache.txt to CMakeCache.txt.removed"
    echo ""
    rm -f ${eagle_build_dir}/CMakeCache.txt.removed && mv ${eagle_build_dir}/CMakeCache.txt ${eagle_build_dir}/CMakeCache.txt.removed
    echo ""
    exit 5
fi

if [ "${eagle_build_dir}" == "${eagle_source_dir}" ]; then
    echo ""
    echo "Warning: it is recommended to build EAGLE outside of the source directory:"
    echo "    mkdir ../EAGLE-build"
    echo "    cd ../EAGLE-build"
    echo "    ../$(basename $(pwd))/configure --prefix=/path/to/install/dir"
    echo "    make"
    echo "    make install"
    echo ""
fi

echo "The build directory ${eagle_build_dir} was configured successfully"
echo ""
echo Type "make" at the top level of the root directory to build EAGLE
echo ""

